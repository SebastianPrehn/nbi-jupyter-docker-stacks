WORKDIR /tmp

ARG CUDA_OS_DIST=ubuntu2204
ARG CUDA_KEYRING_VERSION=1.0-1
ARG CUDA_KEYRING_SHA256=0c4a40cc2caa6a847acbe6d4825a7cf625b7044776243101c0f1164c17b925b3
ARG CUDA_CPU=x86_64
ARG CUDA_MAJOR_VERSION=12
ARG CUDA_MIN_VERSION=3
ARG CUDA_VERSION=${CUDA_MAJOR_VERSION}.${CUDA_MIN_VERSION}
ARG CUDA_PKG_VERSION=12-3

ARG NCCL_VERSION=2.20.3
ARG CUDNN_VERSION=9

ENV CUDA_VERSION=${CUDA_VERSION}
ENV CUDA_PATH="/usr/local/cuda"
ENV CUDA_VERSION_PATH="/usr/local/cuda-${CUDA_VERSION}"

# Install the CUDA keyring for automating the signature public key rotation
# as per https://developer.nvidia.com/blog/updating-the-cuda-linux-gpg-repository-key/
# https://github.com/NVIDIA/nvidia-docker/issues/1631
RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 \
    ca-certificates \
    # Update nvidia GPG key
    && rm -f /etc/apt/sources.list.d/cuda.list \
    && rm -f /etc/apt/sources.list.d/nvidia-ml.list \
    && apt-key del 7fa2af80 \
    && apt-get update && apt-get install -y --no-install-recommends wget \
    && wget https://developer.download.nvidia.com/compute/cuda/repos/${CUDA_OS_DIST}/${CUDA_CPU}/cuda-keyring_${CUDA_KEYRING_VERSION}_all.deb \
    && echo "${CUDA_KEYRING_SHA256} cuda-keyring_${CUDA_KEYRING_VERSION}_all.deb" | sha256sum -c - \
    && dpkg -i cuda-keyring_${CUDA_KEYRING_VERSION}_all.deb

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-${CUDA_PKG_VERSION} \
    cuda-compat-${CUDA_PKG_VERSION} \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Runtime and NCCL
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-libraries-${CUDA_PKG_VERSION} \
    libnpp-${CUDA_PKG_VERSION} \
    cuda-nvtx-${CUDA_PKG_VERSION} \
    libcublas-${CUDA_PKG_VERSION} \
    libcusparse-${CUDA_PKG_VERSION} \
    libnccl2=$NCCL_VERSION-1+cuda${CUDA_VERSION} \
    && apt-get clean \
    && rm -fr /var/lib/apt/lists/* \
    && apt-mark hold libcublas-${CUDA_PKG_VERSION} libnccl2

# CUDNN
RUN apt-get update && apt-get install -y --no-install-recommends \
    cudnn${CUDNN_VERSION}-cuda-${CUDA_MAJOR_VERSION} && \
    rm -rf /var/lib/apt/lists/*

# Add CUDA symlink and missing symlink for libcusolver
RUN ln -s /usr/local/cuda-${CUDA_VERSION} /usr/local/cuda

ENV PATH="${CUDA_PATH}/bin:${PATH}"
ENV LD_LIBRARY_PATH="${CUDA_PATH}/lib64"

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

# set tensorflow verbosity to error level, (default is 0/everything)
ENV TF_CPP_MIN_LOG_LEVEL="3"

RUN chown $NB_UID:$NB_GID -R /tmp

# Install user packages
USER $NB_UID

COPY requirements.txt /tmp/
RUN mamba run -n python3 pip install -r /tmp/requirements.txt \
    && mamba clean --all -f -y

# Set the CUDNN_PATH and include it to the LD_LIBRARY_PATH such
# that tensorflow can correctly open the required libraries
# to discover the host GPU devices
ENV CUDNN_PATH=$PYTHON3_PATH/lib/python3.11/site-packages/nvidia/cudnn
ENV LD_LIBRARY_PATH="${CUDNN_PATH}/lib:${LD_LIBRARY_PATH}"
